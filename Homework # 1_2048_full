"""
Clone of 2048 game.
"""
# Homework # 1 
# @sdlfkorg on June 10, 2015 
# score: 66/100 
# when grid_width and grid_height are different, the program can not work.


import poc_2048_gui
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    # replace with your code from the previous mini-project
     
    new_lst1=[]
    result=[]
    
    for dummy_1 in line:
        if dummy_1 != 0:
            new_lst1.append(dummy_1)
       
    
    
    for dummy_2 in range(0, len(new_lst1)-1, 1):
        
        if (new_lst1[dummy_2]==new_lst1[dummy_2 + 1]):
            new_lst1[dummy_2]=new_lst1[dummy_2]+new_lst1[dummy_2+1]
            new_lst1[dummy_2+1]=0
            
        
    for dummy_3 in new_lst1:
        if dummy_3!=0:
            result.append(dummy_3)
            
    while (len(result)<len(line)):
        result.append(0)
       
    
    return result


def traverse_grid(start_cell, direction, num_steps, EXAMPLE_GRID):
    """
    Function that iterates through the cells in a grid
    in a linear direction
    
    Both start_cell is a tuple(row, col) denoting the
    starting cell
    
    direction is a tuple that contains difference between
    consecutive cells in the traversal
    """
    extract_lst=[]
    
     
    for step in range(num_steps):        
        row = start_cell[0] + step * direction[0]
        col = start_cell[1] + step * direction[1]
        extract_lst.append(EXAMPLE_GRID[row][col])
        
        
        #print "Processing cell", (row, col), 
        #print "with value", EXAMPLE_GRID[row][col]
    
    return extract_lst





class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        self.grid_height=grid_height
        self.grid_width=grid_width
        self.reset()
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self.grid=[[0 for dummy_1 in range(self.grid_width)] for dummy_2 in range(self.grid_height)]
        self.initial=[]
        self.new_tile()
        self.new_tile()

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        output_str="["
        for number in range(0, self.get_grid_height()):
            output_str+=str(self.grid[number])+"\n"
        return output_str.strip("\n")+']'
        #print ""

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self.grid_height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self.grid_width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        # replace with your code
        temp_grid=[]
        
        
        if (direction == LEFT):
            
            for col in range(self.grid_width):
                temp_grid.append(merge(traverse_grid((col, 0), OFFSETS[LEFT], self.grid_width, self.grid)))
                
            
            self.grid=temp_grid
            
            
            
            
        if  (direction ==RIGHT):
            
            for col in range(self.grid_height):
                temp_grid.append(merge(traverse_grid((col, self.grid_width-1), OFFSETS[RIGHT], self.grid_width, self.grid)))
            
            for row in range(self.grid_height):
                for col in range(self.grid_width):
                    self.grid[row][col]=temp_grid[row][self.grid_height-1-col]
            
            
        if  (direction ==UP):
            for row in range(self.grid_width):
                temp_grid.append(merge(traverse_grid((0, row), OFFSETS[UP], self.grid_height, self.grid)))
            
            for col in range(self.grid_height):
                for row in range(self.grid_width):
                    self.grid[row][col]=temp_grid[col][row]
           



          
            
        if  (direction == DOWN):
            for row in range(self.grid_width):
                temp_grid.append(merge(traverse_grid((self.grid_height-1, row), OFFSETS[DOWN], self.grid_height, self.grid)))
            
            for col in range(self.grid_height):
                for row in range(self.grid_width):
                    self.grid[row][col]=temp_grid[col][self.grid_width-row-1]
            
        
        
        
        
        self.new_tile()
        #self.__str__()

    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        # replace with your code
        
        available_pos=[]
        
        for row in range(self.grid_height):
            for col in range(self.grid_width):
                
                if (self.grid[row][col]==0):
                    available_pos.append([row, col])
                    
                    
                    
                    #self.grid[row][col]=2
                    
        #print available_pos
        
        if not available_pos:
            print "there is not any available position!"
            
        else:
            random_tile=random.choice(available_pos)
            
            
            weighted_choices = [(2, 9), (4, 1)]
            population = [val for val, cnt in weighted_choices for dummy_var in range(cnt)]
            random_tile_val = random.choice(population)
            
            self.set_tile(random_tile[0], random_tile[1], random_tile_val)
        
  
    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self.grid[row][col]=value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self.grid[row][col]
    
    

    
    
    


poc_2048_gui.run_gui(TwentyFortyEight(4, 4))

"""

test_grid = TwentyFortyEight(4, 4)


test_grid.set_tile(0, 0, 2)
test_grid.set_tile(0, 1, 0)
test_grid.set_tile(0, 2, 0)
test_grid.set_tile(0, 3, 0)
test_grid.set_tile(1, 0, 0)
test_grid.set_tile(1, 1, 2)
test_grid.set_tile(1, 2, 0)
test_grid.set_tile(1, 3, 0)
test_grid.set_tile(2, 0, 0)
test_grid.set_tile(2, 1, 0)
test_grid.set_tile(2, 2, 2)
test_grid.set_tile(2, 3, 0)
test_grid.set_tile(3, 0, 0)
test_grid.set_tile(3, 1, 0)
test_grid.set_tile(3, 2, 0)
test_grid.set_tile(3, 3, 2)

print test_grid

"""



