"""
Cookie Clicker Simulator
http://www.codeskulptor.org/#user40_FMMjdjRzrP_17.py
"""
# Homework # 4
# @sdlfkorg on July, 2015 
# score: 68.67/100 
# 
# http://www.codeskulptor.org/#user40_FMMjdjRzrP_17.py



import simpleplot

# Used to increase the timeout, if necessary
import codeskulptor, math
codeskulptor.set_timeout(20)

import poc_clicker_provided as provided

# Constants
SIM_TIME = 10000000000.0

class ClickerState:
    """
    Simple class to keep track of the game state.
    """
    
    def __init__(self):
        self.total_cks = 0.0
        self.current_cks = 0.0
        self.cps = 1.0
        self.current_time = 0.0
        self.item_name = None
        self.item_cost = 0.0
        self.history = [(self.current_time, self.item_name, self.item_cost, self.total_cks)]
        
        
        
    def __str__(self):
        
        """
        Return human readable state
        """
        #return "not yet implemented"
   
        
        
        
        
        
        
        
        return "\n" + "TotalCookies:" + str(self.total_cks) + "\n"\
        + "CurrentCookies:" + str(self.current_cks) + "\n"\
        + "CurrentTime:" + str(self.current_time) + "\n"\
        + "CurrentCPS:" + str(self.cps) + "\n"\
        + "History:" + str(self.history)
        
    
    
    def get_cookies(self):
        """
        Return current number of cookies 
        (not total number of cookies)
        
        Should return a float
        """
        return self.current_cks
    
    def get_cps(self):
        """
        Get current CPS

        Should return a float
        """
        return self.cps
    
    def get_time(self):
        """
        Get current time

        Should return a float
        """
        return self.current_time
    
    def get_history(self):
        """
        Return history list

        History list should be a list of tuples of the form:
        (time, item, cost of item, total cookies)

        For example: [(0.0, None, 0.0, 0.0)]

        Should return a copy of any internal data structures,
        so that they will not be modified outside of the class.
        """
        return self.history

    def time_until(self, cookies):
        """
        Return time until you have the given number of cookies
        (could be 0.0 if you already have enough cookies)

        Should return a float with no fractional part
        """
        if cookies>0 and cookies >= self.current_cks:
            return math.ceil(((cookies - self.current_cks)/self.cps))
        else:
            return 0.0

    
    def wait(self, time):
        """
        Wait for given amount of time and update state

        Should do nothing if time <= 0.0
        """
        if time > 0:
            self.current_time += time
            self.current_cks += self.cps * time
            self.total_cks += self.current_cks
            
        else:
            pass
    
    
    def buy_item(self, item_name, cost, additional_cps):
        """
        Buy an item and update state

        Should do nothing if you cannot afford the item
        """
        
        if self.current_cks >= cost:
            self.item_name = item_name
            self.item_cost = cost
            self.current_cks = self.current_cks - self.item_cost
            self.cps += additional_cps
            temp_history = (self.current_time, self.item_name, self.item_cost, self.total_cks)
            self.history.append(temp_history)
        else:
            pass
    
def simulate_clicker(build_info, duration, strategy):
    """
    Function to run a Cookie Clicker game for the given
    duration with the given strategy.  Returns a ClickerState
    object corresponding to the final state of the game.
    """

    # Replace with your code
    
    build_info_obj = build_info.clone()
    #print dir(build_info_obj)
    click_obj = ClickerState()
    
    #step 1, Check the current time and 
    #break out of the loop if the duration has been passed.
    
    while click_obj.get_time() <= duration:
        time_left = duration - click_obj.get_time()
        
        # Call the strategy function to buy item
        item = strategy(click_obj.get_cookies() , click_obj.get_cps(), click_obj.get_history(), time_left, build_info_obj)
        
        
        if item == None:
            break
            
        else:
            cost = build_info_obj.get_cost(item)
            time_to_wait = click_obj.time_until(cost)
            
        if time_to_wait > time_left:
            break
        
        else:
            click_obj.wait(time_to_wait)
            
        click_obj.buy_item(item, build_info_obj.get_cost(item), build_info_obj.get_cps(item)) 
        
        build_info_obj.update_item(item)
        
        
    time_left = duration - click_obj.get_time()
    
    if time_left > 0:
        click_obj.wait(time_left)
        
        
    
    
    
    
    return click_obj


def strategy_cursor_broken(cookies, cps, history, time_left, build_info):
    """
    Always pick Cursor!

    Note that this simplistic (and broken) strategy does not properly
    check whether it can actually buy a Cursor in the time left.  Your
    simulate_clicker function must be able to deal with such broken
    strategies.  Further, your strategy functions must correctly check
    if you can buy the item in the time left and return None if you
    can't.
    """
    return "Cursor"

def strategy_none(cookies, cps, history, time_left, build_info):
    """
    Always return None

    This is a pointless strategy that will never buy anything, but
    that you can use to help debug your simulate_clicker function.
    """
    return None

def strategy_cheap(cookies, cps, history, time_left, build_info):
    """
    Always buy the cheapest item you can afford in the time left.
    """
    
    item_lst = build_info.build_items()
    #print item_lst
    item_cost_lst = map(build_info.get_cost, item_lst)
    
    #print item_cost_lst
    idx = item_cost_lst.index(min(item_cost_lst))
    #print idx
    cheap_item = item_lst[idx]
    #print cheap_item
    if (cookies + cps * time_left) < item_cost_lst[idx]:
        return None
    else:
        return cheap_item
    
    #return cheap_item
    
    
    
    
    

def strategy_expensive(cookies, cps, history, time_left, build_info):
    """
    Always buy the most expensive item you can afford in the time left.
    """
    
    item_lst = build_info.build_items()
    #print item_lst
    item_cost_lst = map(build_info.get_cost, item_lst)
    
    #print item_cost_lst
    idx = item_cost_lst.index(max(item_cost_lst))
    #print idx
    expensive_item = item_lst[idx]
    #print cheap_item
    if (cookies + cps * time_left) < item_cost_lst[idx]:
        return None
    else:
        return expensive_item
    
    #return expensive_item
    
 




def strategy_best(cookies, cps, history, time_left, build_info):
    """
    The best strategy that you are able to implement.
    """
    
    
    item_lst = build_info.build_items()
    cost_lst = map(build_info.get_cost, item_lst)
    cps_lst = map(build_info.get_cps, item_lst)
    eff_lst = []
    for dummy_i in range(len(item_lst)):
        efficiency = cps_lst[dummy_i] / cost_lst[dummy_i]
        eff_lst.append(efficiency)
    most_eff_idx = eff_lst.index(max(eff_lst))
    most_eff_item = item_lst[most_eff_idx] 
    return most_eff_item    


        
def run_strategy(strategy_name, time, strategy):
    """
    Run a simulation for the given time with one strategy.
    """
    state = simulate_clicker(provided.BuildInfo(), time, strategy)
    print strategy_name, ":", state

    # Plot total cookies over time

    # Uncomment out the lines below to see a plot of total cookies vs. time
    # Be sure to allow popups, if you do want to see it

    # history = state.get_history()
    # history = [(item[0], item[3]) for item in history]
    # simpleplot.plot_lines(strategy_name, 1000, 400, 'Time', 'Total Cookies', [history], True)

def run():
    """
    Run the simulator.
    """    
    #run_strategy("Cursor", SIM_TIME, strategy_cursor_broken)

    # Add calls to run_strategy to run additional strategies
    #run_strategy("Cheap", SIM_TIME, strategy_cheap)
    run_strategy("Expensive", SIM_TIME, strategy_expensive)
    #run_strategy("Best", SIM_TIME, strategy_best)
    
run()
    


