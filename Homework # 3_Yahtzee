"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""
# Homework # 4
# @sdlfkorg on June 21, 2015 
# score:  100/100 
# http://www.codeskulptor.org/#user40_q30o17NkR8_5.py



# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    max_score=[]
    for item in hand:
        max_score.append(item*hand.count(item))
        
    return max(max_score)
        


#hand = (1, 1, 1, 5, 6)
#print type(score(hand))

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value 
    """
    outcomes=[num for num in range(1, num_die_sides+1)]
    all_seq=gen_all_sequences(outcomes, num_free_dice)
    
    total_score=0.0
    
    for hand in all_seq:
        temp_hand= tuple(list(held_dice)+list(hand))
        #print temp_hand
        total_score+=score(temp_hand)
    
    return total_score/len(all_seq)

#print expected_value([3, 2], 6, 2)



def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    
    all_holds=[()]
    
    for item in hand:
        #print item
        for subset in all_holds:
            #print all_holds
            #print type(subset)
            all_holds=all_holds+[tuple(subset)+(item,)]
            
    return set(all_holds)
    

    

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    all_choices=gen_all_holds(hand)
    max_expect=0
    max_choice=(0.0, ())
    for temp_hand in all_choices:
        temp_expect = expected_value(temp_hand, num_die_sides, len(hand)-len(temp_hand))
        if temp_expect > max_expect:
            max_expect=temp_expect
            max_choice=(max_expect, temp_hand)
    
    #print max_choice 
    return max_choice

def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (2, 1, 5, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()


#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    




